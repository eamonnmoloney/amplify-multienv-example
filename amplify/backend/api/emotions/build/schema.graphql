type Blog {
  id: ID!
  name: String!
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Card {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  emotions(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: ID!
  title: String!
  blog: Blog
  card: Card
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  intensity: Int
  parent: Post
}

type Comment {
  id: ID!
  content: String
  post: Post
}

type Emotion {
  id: ID!
  name: String!
  intensity: Int
  lastUpdated: String
  parent: Emotion
}

type EmotionConnection {
  items: [Post]
  nextToken: String
}

type Query {
  emotionsForCard(cardId: ID!, limit: Int, nextToken: String): EmotionConnection
  getBlog(id: ID!): Blog
  listBlogs(filter: ModelBlogFilterInput, limit: Int, nextToken: String): ModelBlogConnection
  getCard(id: ID!): Card
  listCards(filter: ModelCardFilterInput, limit: Int, nextToken: String): ModelCardConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getEmotion(id: ID!): Emotion
  listEmotions(filter: ModelEmotionFilterInput, limit: Int, nextToken: String): ModelEmotionConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBlogConnection {
  items: [Blog]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelBlogFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelBlogFilterInput]
  or: [ModelBlogFilterInput]
  not: ModelBlogFilterInput
}

input CreateBlogInput {
  id: ID
  name: String!
}

input UpdateBlogInput {
  id: ID!
  name: String
}

input DeleteBlogInput {
  id: ID
}

type Mutation {
  createBlog(input: CreateBlogInput!): Blog
  updateBlog(input: UpdateBlogInput!): Blog
  deleteBlog(input: DeleteBlogInput!): Blog
  createCard(input: CreateCardInput!): Card
  updateCard(input: UpdateCardInput!): Card
  deleteCard(input: DeleteCardInput!): Card
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
  createEmotion(input: CreateEmotionInput!): Emotion
  updateEmotion(input: UpdateEmotionInput!): Emotion
  deleteEmotion(input: DeleteEmotionInput!): Emotion
}

type Subscription {
  onCreateBlog: Blog @aws_subscribe(mutations: ["createBlog"])
  onUpdateBlog: Blog @aws_subscribe(mutations: ["updateBlog"])
  onDeleteBlog: Blog @aws_subscribe(mutations: ["deleteBlog"])
  onCreateCard: Card @aws_subscribe(mutations: ["createCard"])
  onUpdateCard: Card @aws_subscribe(mutations: ["updateCard"])
  onDeleteCard: Card @aws_subscribe(mutations: ["deleteCard"])
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateEmotion: Emotion @aws_subscribe(mutations: ["createEmotion"])
  onUpdateEmotion: Emotion @aws_subscribe(mutations: ["updateEmotion"])
  onDeleteEmotion: Emotion @aws_subscribe(mutations: ["deleteEmotion"])
}

type ModelCardConnection {
  items: [Card]
  nextToken: String
}

input ModelCardFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  and: [ModelCardFilterInput]
  or: [ModelCardFilterInput]
  not: ModelCardFilterInput
}

input CreateCardInput {
  id: ID
  name: String!
  createdAt: AWSDateTime!
}

input UpdateCardInput {
  id: ID!
  name: String
  createdAt: AWSDateTime
}

input DeleteCardInput {
  id: ID
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  intensity: ModelIntFilterInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  intensity: Int
  postBlogId: ID
  postCardId: ID
  postParentId: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  intensity: Int
  postBlogId: ID
  postCardId: ID
  postParentId: ID
}

input DeletePostInput {
  id: ID
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  content: ModelStringFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  content: String
  commentPostId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  commentPostId: ID
}

input DeleteCommentInput {
  id: ID
}

type ModelEmotionConnection {
  items: [Emotion]
  nextToken: String
}

input ModelEmotionFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  intensity: ModelIntFilterInput
  lastUpdated: ModelStringFilterInput
  and: [ModelEmotionFilterInput]
  or: [ModelEmotionFilterInput]
  not: ModelEmotionFilterInput
}

input CreateEmotionInput {
  id: ID
  name: String!
  intensity: Int
  lastUpdated: String
  emotionParentId: ID
}

input UpdateEmotionInput {
  id: ID!
  name: String
  intensity: Int
  lastUpdated: String
  emotionParentId: ID
}

input DeleteEmotionInput {
  id: ID
}
